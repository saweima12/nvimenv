"
" Tassis 's NeoVim Configure
"
set encoding=utf-8
set hidden
set updatetime=100
set shortmess+=c
set number
"set termguicolors

" ::: Plugins block. :::
call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')

" ::::: Icons :::::
Plug 'kyazdani42/nvim-web-devicons'
"Plug 'ryanoasis/vim-devicons'


" ::::: Extra Utilities :::::

" Working Directory Tree
Plug 'ms-jpq/chadtree', {'branch': 'chad', 'do': 'python3 -m chadtree deps'}

" Tab Bar
Plug 'romgrk/barbar.nvim'

" ::::: PluginManager :::::
Plug 'neoclide/coc.nvim', {'branch': 'release'} 
lua require('packer-config') 



call plug#end()

" ::: Open Status View :::
lua require('lualine').setup { options = { theme = 'dracula'} }

lua require('nvim-web-devicons').setup { defulat= true;}
"
" ::: coc.nvim :::
"
let g:coc_global_extensions = []
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" ctrl + space open autoComplete list.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)


" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction




